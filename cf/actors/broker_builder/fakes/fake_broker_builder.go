// This file was generated by counterfeiter
package fakes

import (
	"sync"
	. "github.com/cloudfoundry/cli/cf/actors/broker_builder"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeBrokerBuilder struct {
	GetAllServiceBrokersStub        func() ([]models.ServiceBroker, error)
	getAllServiceBrokersMutex       sync.RWMutex
	getAllServiceBrokersArgsForCall []struct{}
	getAllServiceBrokersReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
	GetBrokersForServicesStub        func([]models.ServiceOffering) ([]models.ServiceBroker, error)
	getBrokersForServicesMutex       sync.RWMutex
	getBrokersForServicesArgsForCall []struct {
		arg1 []models.ServiceOffering
	}
	getBrokersForServicesReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
	GetBrokerWithAllServicesStub        func(brokerName string) ([]models.ServiceBroker, error)
	getBrokerWithAllServicesMutex       sync.RWMutex
	getBrokerWithAllServicesArgsForCall []struct {
		brokerName string
	}
	getBrokerWithAllServicesReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
	GetBrokerWithSpecifiedServiceStub        func(serviceName string) ([]models.ServiceBroker, error)
	getBrokerWithSpecifiedServiceMutex       sync.RWMutex
	getBrokerWithSpecifiedServiceArgsForCall []struct {
		serviceName string
	}
	getBrokerWithSpecifiedServiceReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
	GetSpecificBrokerForServicesStub        func(string, []models.ServiceOffering) ([]models.ServiceBroker, error)
	getSpecificBrokerForServicesMutex       sync.RWMutex
	getSpecificBrokerForServicesArgsForCall []struct {
		arg1 string
		arg2 []models.ServiceOffering
	}
	getSpecificBrokerForServicesReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
}

func (fake *FakeBrokerBuilder) GetAllServiceBrokers() ([]models.ServiceBroker, error) {
	fake.getAllServiceBrokersMutex.Lock()
	defer fake.getAllServiceBrokersMutex.Unlock()
	fake.getAllServiceBrokersArgsForCall = append(fake.getAllServiceBrokersArgsForCall, struct{}{})
	if fake.GetAllServiceBrokersStub != nil {
		return fake.GetAllServiceBrokersStub()
	} else {
		return fake.getAllServiceBrokersReturns.result1, fake.getAllServiceBrokersReturns.result2
	}
}

func (fake *FakeBrokerBuilder) GetAllServiceBrokersCallCount() int {
	fake.getAllServiceBrokersMutex.RLock()
	defer fake.getAllServiceBrokersMutex.RUnlock()
	return len(fake.getAllServiceBrokersArgsForCall)
}

func (fake *FakeBrokerBuilder) GetAllServiceBrokersReturns(result1 []models.ServiceBroker, result2 error) {
	fake.getAllServiceBrokersReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerBuilder) GetBrokersForServices(arg1 []models.ServiceOffering) ([]models.ServiceBroker, error) {
	fake.getBrokersForServicesMutex.Lock()
	defer fake.getBrokersForServicesMutex.Unlock()
	fake.getBrokersForServicesArgsForCall = append(fake.getBrokersForServicesArgsForCall, struct {
		arg1 []models.ServiceOffering
	}{arg1})
	if fake.GetBrokersForServicesStub != nil {
		return fake.GetBrokersForServicesStub(arg1)
	} else {
		return fake.getBrokersForServicesReturns.result1, fake.getBrokersForServicesReturns.result2
	}
}

func (fake *FakeBrokerBuilder) GetBrokersForServicesCallCount() int {
	fake.getBrokersForServicesMutex.RLock()
	defer fake.getBrokersForServicesMutex.RUnlock()
	return len(fake.getBrokersForServicesArgsForCall)
}

func (fake *FakeBrokerBuilder) GetBrokersForServicesArgsForCall(i int) []models.ServiceOffering {
	fake.getBrokersForServicesMutex.RLock()
	defer fake.getBrokersForServicesMutex.RUnlock()
	return fake.getBrokersForServicesArgsForCall[i].arg1
}

func (fake *FakeBrokerBuilder) GetBrokersForServicesReturns(result1 []models.ServiceBroker, result2 error) {
	fake.getBrokersForServicesReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerBuilder) GetBrokerWithAllServices(brokerName string) ([]models.ServiceBroker, error) {
	fake.getBrokerWithAllServicesMutex.Lock()
	defer fake.getBrokerWithAllServicesMutex.Unlock()
	fake.getBrokerWithAllServicesArgsForCall = append(fake.getBrokerWithAllServicesArgsForCall, struct {
		brokerName string
	}{brokerName})
	if fake.GetBrokerWithAllServicesStub != nil {
		return fake.GetBrokerWithAllServicesStub(brokerName)
	} else {
		return fake.getBrokerWithAllServicesReturns.result1, fake.getBrokerWithAllServicesReturns.result2
	}
}

func (fake *FakeBrokerBuilder) GetBrokerWithAllServicesCallCount() int {
	fake.getBrokerWithAllServicesMutex.RLock()
	defer fake.getBrokerWithAllServicesMutex.RUnlock()
	return len(fake.getBrokerWithAllServicesArgsForCall)
}

func (fake *FakeBrokerBuilder) GetBrokerWithAllServicesArgsForCall(i int) string {
	fake.getBrokerWithAllServicesMutex.RLock()
	defer fake.getBrokerWithAllServicesMutex.RUnlock()
	return fake.getBrokerWithAllServicesArgsForCall[i].brokerName
}

func (fake *FakeBrokerBuilder) GetBrokerWithAllServicesReturns(result1 []models.ServiceBroker, result2 error) {
	fake.getBrokerWithAllServicesReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerBuilder) GetBrokerWithSpecifiedService(serviceName string) ([]models.ServiceBroker, error) {
	fake.getBrokerWithSpecifiedServiceMutex.Lock()
	defer fake.getBrokerWithSpecifiedServiceMutex.Unlock()
	fake.getBrokerWithSpecifiedServiceArgsForCall = append(fake.getBrokerWithSpecifiedServiceArgsForCall, struct {
		serviceName string
	}{serviceName})
	if fake.GetBrokerWithSpecifiedServiceStub != nil {
		return fake.GetBrokerWithSpecifiedServiceStub(serviceName)
	} else {
		return fake.getBrokerWithSpecifiedServiceReturns.result1, fake.getBrokerWithSpecifiedServiceReturns.result2
	}
}

func (fake *FakeBrokerBuilder) GetBrokerWithSpecifiedServiceCallCount() int {
	fake.getBrokerWithSpecifiedServiceMutex.RLock()
	defer fake.getBrokerWithSpecifiedServiceMutex.RUnlock()
	return len(fake.getBrokerWithSpecifiedServiceArgsForCall)
}

func (fake *FakeBrokerBuilder) GetBrokerWithSpecifiedServiceArgsForCall(i int) string {
	fake.getBrokerWithSpecifiedServiceMutex.RLock()
	defer fake.getBrokerWithSpecifiedServiceMutex.RUnlock()
	return fake.getBrokerWithSpecifiedServiceArgsForCall[i].serviceName
}

func (fake *FakeBrokerBuilder) GetBrokerWithSpecifiedServiceReturns(result1 []models.ServiceBroker, result2 error) {
	fake.getBrokerWithSpecifiedServiceReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerBuilder) GetSpecificBrokerForServices(arg1 string, arg2 []models.ServiceOffering) ([]models.ServiceBroker, error) {
	fake.getSpecificBrokerForServicesMutex.Lock()
	defer fake.getSpecificBrokerForServicesMutex.Unlock()
	fake.getSpecificBrokerForServicesArgsForCall = append(fake.getSpecificBrokerForServicesArgsForCall, struct {
		arg1 string
		arg2 []models.ServiceOffering
	}{arg1, arg2})
	if fake.GetSpecificBrokerForServicesStub != nil {
		return fake.GetSpecificBrokerForServicesStub(arg1, arg2)
	} else {
		return fake.getSpecificBrokerForServicesReturns.result1, fake.getSpecificBrokerForServicesReturns.result2
	}
}

func (fake *FakeBrokerBuilder) GetSpecificBrokerForServicesCallCount() int {
	fake.getSpecificBrokerForServicesMutex.RLock()
	defer fake.getSpecificBrokerForServicesMutex.RUnlock()
	return len(fake.getSpecificBrokerForServicesArgsForCall)
}

func (fake *FakeBrokerBuilder) GetSpecificBrokerForServicesArgsForCall(i int) (string, []models.ServiceOffering) {
	fake.getSpecificBrokerForServicesMutex.RLock()
	defer fake.getSpecificBrokerForServicesMutex.RUnlock()
	return fake.getSpecificBrokerForServicesArgsForCall[i].arg1, fake.getSpecificBrokerForServicesArgsForCall[i].arg2
}

func (fake *FakeBrokerBuilder) GetSpecificBrokerForServicesReturns(result1 []models.ServiceBroker, result2 error) {
	fake.getSpecificBrokerForServicesReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

var _ BrokerBuilder = new(FakeBrokerBuilder)
